rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users collection rules - consolidated
    match /users/{userId} {
      // Allow reading/updating your own document
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow admins/SRA/system_admin to read/write any user doc if their account exists and has an appropriate role
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'sra', 'system_admin'];

      // Allow unauthenticated verification flow for legacy verify.html use-case
      allow read: if request.auth == null && resource.data.emailVerified == false;
      allow update: if request.auth == null &&
        request.resource.data.emailVerified == true &&
        resource.data.emailVerified == false &&
        request.resource.data.status == 'verified';

      // Allow creation: authenticated users can create their own doc; also allow SRA pre-creation path
      allow create: if request.auth != null || (
        request.resource.data.role == 'sra' && request.resource.data.email != null && request.resource.data.name != null
      );
    }

    
    // Explicit admin reads for dashboard-related collections
    // Allow users with admin/sra/system_admin roles to read admin logs and dashboard collections
    match /admin_security_logs/{docId} {
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin','sra','system_admin'];
      allow create: if request.auth != null;
    }

    match /security_logs/{docId} {
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin','sra','system_admin'];
      allow create: if request.auth != null;
    }

    // Drivers_Badge rules (kept below) provide read access already.
    
    // Allow creation of notifications
    match /notifications/{notificationId} {
      allow create, read, update, delete: if request.auth != null;
    }
    
    // Allow creation of email_queue
    match /email_queue/{emailId} {
      allow create, read, update, delete: if request.auth != null;
    }

    // Allow public submission of feedbacks; only system_admin can read/manage them
    match /feedbacks/{feedbackId} {
      // Allow anyone (even unauthenticated) to create feedback entries so users can send quick feedback.
      allow create: if true;

      // Only system_admin users can read, update or delete feedback entries
      allow read, update, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'system_admin';
    }
    
    // Fields access rules
    match /fields/{fieldId} {
      // Anyone authenticated can read fields
      allow read: if request.auth != null;
      
      // Only verified landowners can create fields
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'landowner' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.status == 'verified';
      
      // Only the field owner can update their fields
      allow update: if request.auth != null && 
        resource.data.landowner_id == request.auth.uid;
      
      // Only the field owner can delete their fields
      allow delete: if request.auth != null && 
        resource.data.landowner_id == request.auth.uid;
    }
    
    // Add this block inside your firestore.rules, e.g. after the users or fields rules
    match /field_applications/{docId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow update: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'sra' ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
    // Nested fields within an application (users can have multiple fields)
    match /field_applications/{docId}/fields/{fieldId} {
      // Allow authenticated users and SRA/admins to read applications
      allow read: if request.auth != null;
      // Only SRA officers/admins can update review status under nested applications
      allow update: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['sra', 'admin']
      );
      // Owners can create their own nested field applications
      allow create: if request.auth != null && request.auth.uid == docId;
    }

    // Field workers (join requests) access rules
    match /field_workers/{requestId} {
      // Users can read their own requests
      allow read: if request.auth != null && 
        (resource.data.user_uid == request.auth.uid || 
         get(/databases/$(database)/documents/fields/$(resource.data.field_id)).data.landowner_id == request.auth.uid);
      
      // Users can create join requests for any field
      allow create: if request.auth != null && 
        request.resource.data.user_uid == request.auth.uid;
      
      // Only the field owner can update join requests (approve/reject)
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/fields/$(resource.data.field_id)).data.landowner_id == request.auth.uid;
      
      // Users can delete their own requests, field owners can delete requests for their fields
      allow delete: if request.auth != null && 
        (resource.data.user_uid == request.auth.uid || 
         get(/databases/$(database)/documents/fields/$(resource.data.field_id)).data.landowner_id == request.auth.uid);
    }
    
    // Task logs access rules
    match /task_logs/{logId} {
      // Field workers can read logs for fields they're approved to work on
      allow read: if request.auth != null && 
        (resource.data.user_uid == request.auth.uid || 
         get(/databases/$(database)/documents/fields/$(resource.data.field_id)).data.landowner_id == request.auth.uid);
      
      // Approved field workers can create task logs
      allow create: if request.auth != null && 
        request.resource.data.user_uid == request.auth.uid &&
        exists(/databases/$(database)/documents/field_workers/$(request.auth.uid + '_' + resource.data.field_id)) &&
        get(/databases/$(database)/documents/field_workers/$(request.auth.uid + '_' + resource.data.field_id)).data.status == 'approved';
      
      // Users can update their own task logs
      allow update: if request.auth != null && 
        resource.data.user_uid == request.auth.uid;
      
      // Users can delete their own task logs, field owners can delete logs for their fields
      allow delete: if request.auth != null && 
        (resource.data.user_uid == request.auth.uid || 
         get(/databases/$(database)/documents/fields/$(resource.data.field_id)).data.landowner_id == request.auth.uid);
    }
    
    // Reports access rules
    match /reports/{reportId} {
      // Field owners can read reports for their fields
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/fields/$(resource.data.field_id)).data.landowner_id == request.auth.uid;
      
      // Field owners can create reports for their fields
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/fields/$(request.resource.data.field_id)).data.landowner_id == request.auth.uid;
      
      // Field owners can update reports for their fields
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/fields/$(resource.data.field_id)).data.landowner_id == request.auth.uid;
      
      // Field owners can delete reports for their fields
      allow delete: if request.auth != null && 
        get(/databases/$(database)/documents/fields/$(resource.data.field_id)).data.landowner_id == request.auth.uid;
    }

    // Drivers Badge applications - consolidated rules
    match /Drivers_Badge/{docId} {
      // Owner can create exactly once; docId must equal uid
      allow create: if request.auth != null &&
        docId == request.auth.uid &&
        request.resource.data.requestedBy == request.auth.uid &&
        !exists(/databases/$(database)/documents/Drivers_Badge/$(request.auth.uid));

      // Allow reads from clients (dashboard may read publicly)
      allow read: if true;

      // Owner can update at most once every 30 days; staff/admins/system_admins can always update
      allow update: if request.auth != null && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['sra', 'admin', 'system_admin'] ||
        (
          resource.data.requestedBy == request.auth.uid &&
          (!resource.data.lastEdit ||
            (request.time.toMillis() - resource.data.lastEdit.toMillis() >= 30 * 24 * 60 * 60 * 1000))
        )
      );

      // Allow deletes by owner or staff/admin/system_admin
      allow delete: if request.auth != null && (
        resource.data.requestedBy == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['sra', 'admin', 'system_admin']
      );
    }

  }
}